{
  "comments": [
    {
      "key": {
        "uuid": "bc8ae205_5bf5832a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T08:35:31Z",
      "side": 1,
      "message": "Could we try to inject the builder and simplify the tests?",
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ade2628_f94f1606",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T11:11:16Z",
      "side": 1,
      "message": "\u003e Could we try to inject the builder and simplify the tests?\n\nWhere to inject the builder? In which test?",
      "parentUuid": "bc8ae205_5bf5832a",
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d939e1c_fcd328c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T12:09:28Z",
      "side": 1,
      "message": "See my previous comment. Instead of creating CloudWatchAsyncClientBuilder in GerritCloudwatchReporter we could inject it. So in tests we can mock it and avoid those boolean variables represents state and used just for test. In the module we can have something like bind(CloudWatchAsyncClientBuilder.class).toInstance(CloudWatchAsyncClient.builder()",
      "parentUuid": "2ade2628_f94f1606",
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f061b6f_76c66a11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T16:47:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d939e1c_fcd328c7",
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105a04c3_08ba017e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T08:07:13Z",
      "side": 1,
      "message": "What about injecting the builder? In the module we can have something like bind(CloudWatchAsyncClientBuilder.class).toInstance(CloudWatchAsyncClient.builder()) then we don\u0027t need `started` variable and we can mock the builder and check the plugin behaviour instead of checking the logs",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6aeefc0_23f011ee",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T12:47:39Z",
      "side": 1,
      "message": "The purpose of the integration test is to test the system without mocks: if we mock AWS/Cloudwatch part we won\u0027t be able to spot errors that we found:\n- Missing Jackson dependencies\n- Missing AWS zone property in tests\n\nChecking the logs wasn\u0027t nice, but it was the only way to verify that the machinery integrated worked, until we start using a real mocked CloudWatch metrics container.",
      "parentUuid": "105a04c3_08ba017e",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efa19b81_3296d9d9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T13:56:08Z",
      "side": 1,
      "message": "I agree but with this injection we can test  GerritCloudwatchReporter with unit tests and we don\u0027t need extra code for testing and if you check follow up changes we are adding more and more variables just for testing. But I don\u0027want to block this CR because it\u0027s needed. I can prepare change on top of this chain to remove all that unnecessary code.",
      "parentUuid": "a6aeefc0_23f011ee",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17df107b_84834c88",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T15:40:44Z",
      "side": 1,
      "message": "\u003e I agree but with this injection we can test  GerritCloudwatchReporter with unit tests and we don\u0027t need extra code for testing and if you check follow up changes we are adding more and more variables just for testing. \n\nTrue, let me remove them because actually some of them aren\u0027t needed after all.\n\n\u003e But I don\u0027want to block this CR because it\u0027s needed. I can prepare change on top of this chain to remove all that unnecessary code.\n\nI can do some cleanup now anyway.",
      "parentUuid": "efa19b81_3296d9d9",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8d73755_9630c4d6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T16:20:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17df107b_84834c88",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 96
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee67595f_24afba86",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 63,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T08:07:13Z",
      "side": 1,
      "message": "nit: this should be a trace because it will spam the logs",
      "range": {
        "startLine": 63,
        "startChar": 11,
        "endLine": 63,
        "endChar": 17
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59695560_dfe0bb14",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporter.java",
        "patchSetId": 21
      },
      "lineNbr": 63,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T12:47:39Z",
      "side": 1,
      "message": "It should report only once at startup, why do you believe it would SPAM the logs?",
      "parentUuid": "ee67595f_24afba86",
      "range": {
        "startLine": 63,
        "startChar": 11,
        "endLine": 63,
        "endChar": 17
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4835425_2ecb80cf",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 51,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T08:07:13Z",
      "side": 1,
      "message": "nit: for more readability Strings.nullToEmpty(pluginConfig.getString(KEY_RATE))",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 52
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16c6cb79_47d0296a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 51,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T12:47:39Z",
      "side": 1,
      "message": "mmm ... String.nullToEmpty() is very verbose and not readable either. What about replacing the \"\" with a EMPTY_STRING constant? So that is clear that the default is empty. WDYT?",
      "parentUuid": "f4835425_2ecb80cf",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 52
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d31c105_efd8a6da",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 51,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T13:56:08Z",
      "side": 1,
      "message": "Fine for me",
      "parentUuid": "16c6cb79_47d0296a",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 52
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66511f69_c08488cf",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 51,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T16:20:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d31c105_efd8a6da",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 52
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aceed77_3a72ae44",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 56,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-07-17T08:07:13Z",
      "side": 1,
      "message": "nit: for more readability Strings.nullToEmpty(pluginConfig.getString(KEY_INITIAL_DELAY))",
      "range": {
        "startLine": 56,
        "startChar": 16,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c1e72f_63411f75",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 56,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T12:47:39Z",
      "side": 1,
      "message": "Same as before.",
      "parentUuid": "8aceed77_3a72ae44",
      "range": {
        "startLine": 56,
        "startChar": 16,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64d20060_dc100a4c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/GerritCloudwatchReporterConfig.java",
        "patchSetId": 21
      },
      "lineNbr": 56,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-17T16:23:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53c1e72f_63411f75",
      "range": {
        "startLine": 56,
        "startChar": 16,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "70768a3ae3cf06cd37b4fcea02e00440876d119f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}
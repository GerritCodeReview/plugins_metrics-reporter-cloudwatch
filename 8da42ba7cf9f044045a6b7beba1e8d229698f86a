{
  "comments": [
    {
      "key": {
        "uuid": "2aff92b9_77ce083e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-08-11T07:52:01Z",
      "side": 1,
      "message": "If cloudwatch doesn\u0027t support delta functions at all, in which case would we need the \"rawCountValue\" set to true?\n\nIf it doesn\u0027t ever make sense to enable it, should we just remove the config altogether?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 57
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cee5c3dd_88eb0647",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-08-11T07:52:01Z",
      "side": 1,
      "message": "built",
      "range": {
        "startLine": 9,
        "startChar": 34,
        "endLine": 9,
        "endChar": 39
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0a02f2c_17900142",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-08-11T08:02:07Z",
      "side": 1,
      "message": "In our case we always want to send metrics as a delta but we don\u0027t know how other users are planning to use it, so keeping this property make sense",
      "parentUuid": "2aff92b9_77ce083e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 57
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39bf90d2_6a7825e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-08-11T08:02:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cee5c3dd_88eb0647",
      "range": {
        "startLine": 9,
        "startChar": 34,
        "endLine": 9,
        "endChar": 39
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf469f03_2d249bbf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-08-11T08:05:19Z",
      "side": 1,
      "message": "However, that may depend on the metric right? Some metrics may be useful to be kept as a counter raw value and other won\u0027t.\n\nLet keep it simple for now as a global switch: we can then tailor this to the specific metric if we need to.\n\nWDYT?",
      "parentUuid": "d0a02f2c_17900142",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 57
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "badb2c0c_f99d8aee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-08-11T08:07:27Z",
      "side": 1,
      "message": "Yes you are right the best approach would be to have this switch per metric, but this requires more refactoring. I suggest to do that in a separate change",
      "parentUuid": "cf469f03_2d249bbf",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 57
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2408279_a573dbc3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-08-11T08:31:07Z",
      "side": 1,
      "message": "\u003e However, that may depend on the metric right? Some metrics may be useful to be kept as a counter raw value and other won\u0027t.\n\n\u003e I suggest to do that in a separate change\n\nYeha, this would be ideal, but the codahale-aggregated-metrics-cloudwatch-reporter API does not support per-metric configuration of the rawValue, only globally, AFAICT.\n\nWe could look at patching that library though ðŸ˜Š\n\nI still don\u0027t see much value in ever wanting to plot cumulative counters (I should have not used that method in the first place, sorry about that), but if you are happy with this being configurable, that\u0027s fine by me.",
      "parentUuid": "badb2c0c_f99d8aee",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 57
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56dce3e4_529b2d70",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/MetricsReporterCloudwatchIT.java",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-08-11T07:52:01Z",
      "side": 1,
      "message": "Why 2 here, rather than TEST_TIMEOUT?",
      "range": {
        "startLine": 77,
        "startChar": 66,
        "endLine": 77,
        "endChar": 77
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f7e53a2_280c61e8",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/MetricsReporterCloudwatchIT.java",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-08-11T07:59:34Z",
      "side": 1,
      "message": "Because we have to increment counter twice so it must be small enough to not cause test timeout",
      "parentUuid": "56dce3e4_529b2d70",
      "range": {
        "startLine": 77,
        "startChar": 66,
        "endLine": 77,
        "endChar": 77
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "330fce00_ce598821",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/MetricsReporterCloudwatchIT.java",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-08-11T08:31:07Z",
      "side": 1,
      "message": "I ran the tests using the TEST_TIMEOUT instead and they all pass, even with parallelism. Were they failing for you?\n\nIf we do need this value, can we capture it in a variable rather than being a magic number?",
      "parentUuid": "7f7e53a2_280c61e8",
      "range": {
        "startLine": 77,
        "startChar": 66,
        "endLine": 77,
        "endChar": 77
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acde33b3_a17e1501",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/metricsreportercloudwatch/MetricsReporterCloudwatchIT.java",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-08-11T08:42:10Z",
      "side": 1,
      "message": "It\u0027s more like just in case. If you see line 224 waitUntil waits for TEST_TIMEOUT to get correct value so if our rate is equals TEST_TIMEOUT there is a chance that with any delay somewhere waitUntil will timeout before metric was pushed. That\u0027s why I\u0027ve put rate lower. But you are right this is an issue for every tests is this suite I will put TEST_TIMEOUT and if we see tests being flaky we should fix it for all tests",
      "parentUuid": "330fce00_ce598821",
      "range": {
        "startLine": 77,
        "startChar": 66,
        "endLine": 77,
        "endChar": 77
      },
      "revId": "8da42ba7cf9f044045a6b7beba1e8d229698f86a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}